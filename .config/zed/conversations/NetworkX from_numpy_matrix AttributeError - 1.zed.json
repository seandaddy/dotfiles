{"id":"bb2853cd-96a3-4443-88f0-f6d00407663c","zed":"context","version":"0.4.0","text":"\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[1], line 14\n     11 m = df.values\n     13 # Create a graph from the adjacency matrix\n---> 14 G = nx.from_numpy_matrix(m)\nAttributeError: module 'networkx' has no attribute 'from_numpy_matrix'\nThe error you're encountering is due to the fact that the `from_numpy_matrix` function has been deprecated in NetworkX. Instead, you should use the `from_numpy_array` function. Here's how you can modify your code:\n\n```python\nimport networkx as nx\nimport pandas as pd\nimport numpy as np\n\n# Assuming df is your DataFrame containing the adjacency matrix\ndf = pd.DataFrame({\n    'A': [0, 1, 0],\n    'B': [1, 0, 1],\n    'C': [0, 1, 0]\n})\n\n# Convert the DataFrame to a numpy array\nm = df.values\n\n# Create a graph from the adjacency matrix\nG = nx.from_numpy_array(m)\n\n# Now you can work with the graph G\nprint(G.nodes())\nprint(G.edges())\n```\n\nIn this code, `from_numpy_array` is used to create a graph from the adjacency matrix stored in the numpy array `m`. This should resolve the `AttributeError` you encountered.\n---------------------------------------------------------------------------\nNetworkXError                             Traceback (most recent call last)\nCell In[2], line 14\n     11 m = df.values\n     13 # Create a graph from the adjacency matrix\n---> 14 G = nx.from_numpy_array(m)\nFile ~/.pyenv/versions/3.13.0/lib/python3.13/site-packages/networkx/utils/decorators.py:788, in argmap.__call__.<locals>.func(_a\nrgmap__wrapper, *args, **kwargs)\n    787 def func(*args, __wrapper=None, **kwargs):\n--> 788     return argmap._lazy_compile(__wrapper)(*args, **kwargs)\nFile <class 'networkx.utils.decorators.argmap'> compilation 4:3, in argmap_from_numpy_array_1(A, parallel_edges, create_using, e\ndge_attr, nodelist, backend, **backend_kwargs)\n      1 import bz2\n      2 import collections\n----> 3 import gzip\n      4 import inspect\n      5 import itertools\nFile ~/.pyenv/versions/3.13.0/lib/python3.13/site-packages/networkx/utils/backends.py:967, in _dispatchable.__call__(self, backe\nnd, *args, **kwargs)\n    965     if backend is not None and backend != \"networkx\":\n    966         raise ImportError(f\"'{backend}' backend is not installed\")\n--> 967     return self.orig_func(*args, **kwargs)\n    969 # Use `backend_name` in this function instead of `backend`.\n    970 # This is purely for aesthetics and to make it easier to search for this\n    971 # variable since \"backend\" is used in many comments and log/error messages.\n    972 backend_name = backend\nFile ~/.pyenv/versions/3.13.0/lib/python3.13/site-packages/networkx/convert_matrix.py:1242, in from_numpy_array(A, parallel_edge\ns, create_using, edge_attr, nodelist)\n   1240 n, m = A.shape\n   1241 if n != m:\n-> 1242     raise nx.NetworkXError(f\"Adjacency matrix not square: nx,ny={A.shape}\")\n   1243 dt = A.dtype\n   1244 try:\nNetworkXError: Adjacency matrix not square: nx,ny=(17, 18)\nThe error you're encountering indicates that the adjacency matrix is not square, meaning the number of rows is not equal to the number of columns. An adjacency matrix for a graph must be square because it represents the connections between nodes, and each node must have a corresponding row and column.\n\nTo resolve this issue, you need to ensure that your DataFrame `df` is square. Here's an example of how to check and create a square adjacency matrix:\n\n```python\nimport networkx as nx\nimport pandas as pd\nimport numpy as np\n\n# Example DataFrame (ensure it's square)\ndata = {\n    'A': [0, 1, 0],\n    'B': [1, 0, 1],\n    'C': [0, 1, 0]\n}\ndf = pd.DataFrame(data)\n\n# Check if the DataFrame is square\nif df.shape[0] != df.shape[1]:\n    raise ValueError(\"The adjacency matrix must be square.\")\n\n# Convert the DataFrame to a numpy array\nm = df.values\n\n# Create a graph from the adjacency matrix\nG = nx.from_numpy_array(m)\n\n# Now you can work with the graph G\nprint(G.nodes())\nprint(G.edges())\n```\n\nIf your actual DataFrame is not square, you need to adjust it to make it square. This might involve adding or removing rows/columns, depending on your specific use case. Here's an example of how you might adjust a non-square DataFrame to make it square by adding zero rows/columns:\n\n```python\nimport networkx as nx\nimport pandas as pd\nimport numpy as np\n\n# Example non-square DataFrame\ndata = {\n    'A': [0, 1, 0, 1],\n    'B': [1, 0, 1, 0],\n    'C': [0, 1, 0, 1]\n}\ndf = pd.DataFrame(data)\n\n# Make the DataFrame square by adding zero rows/columns\nif df.shape[0] != df.shape[1]:\n    max_dim = max(df.shape)\n    df = df.reindex(index=range(max_dim), columns=range(max_dim), fill_value=0)\n\n# Convert the DataFrame to a numpy array\nm = df.values\n\n# Create a graph from the adjacency matrix\nG = nx.from_numpy_array(m)\n\n# Now you can work with the graph G\nprint(G.nodes())\nprint(G.edges())\n```\n\nIn this example, the DataFrame is padded with zeros to make it square. Adjust this approach as needed for your specific data.\n   Unnamed: 0  Muklas  Amrozi  Imron  Samudra  Dulmatin  Idris  Mubarok  \\\n0      Muklas       0       2      2        1         1      5        0\n1      Amrozi       2       0      0        2         0      4        5\n2       Imron       2       0      0        3         5      3        0\n3     Samudra       1       2      3        0         2      5        2\n4    Dulmatin       1       0      5        2         0      2        0\n5       Idris       5       4      3        5         2      0        2\n6     Mubarok       0       5      0        2         0      2        0\n7     Azahari       1       0      5        2         5      2        0\n8       Ghoni       1       0      5        2         5      2        0\n9     Arnasan       0       0      0        2         0      0        0\n10       Rauf       0       0      0        2         0      0        0\n11    Octavia       0       0      0        2         0      0        0\n12    Hidayat       0       0      0        2         0      0        0\n13    Junaedi       0       0      0        2         0      0        0\n14      Patek       1       0      5        2         5      2        0\n15       Feri       0       0      1        0         1      0        0\n16     Sarijo       1       0      5        2         5      2        0\n    Azahari  Ghoni  Arnasan  Rauf  Octavia  Hidayat  Junaedi  Patek  Feri  \\\n0         1      1        0     0        0        0        0      1     0\n1         0      0        0     0        0        0        0      0     0\n2         5      5        0     0        0        0        0      5     1\n3         2      2        2     2        2        2        2      2     0\n4         5      5        0     0        0        0        0      5     1\n5         2      2        0     0        0        0        0      2     0\n6         0      0        0     0        0        0        0      0     0\n7         0      5        0     0        0        0        0      2     1\n8         5      0        0     0        0        0        0      5     1\n9         0      0        0     2        2        2        2      0     0\n10        0      0        2     0        2        2        2      0     0\n11        0      0        2     2        0        2        2      0     0\n12        0      0        2     2        2        0        2      0     0\n13        0      0        2     2        2        2        0      0     0\n14        2      5        0     0        0        0        0      0     1\n15        1      1        0     0        0        0        0      1     0\n16        2      5        0     0        0        0        0      5     1\n    Sarijo\n0        1\n1        0\n2        5\n3        2\n4        5\n5        2\n6        0\n7        2\n8        5\n9        0\n10       0\n11       0\n12       0\n13       0\n14       5\n15       1\n16       0\nmy data is like this, and I want to make a graph from this data. I have tried to make a graph from this data using the following code:\nTo create a graph from your adjacency matrix data, you need to ensure that the DataFrame is properly formatted and then use NetworkX to create the graph. Here is a step-by-step guide to achieve this:\n\n1. Ensure the DataFrame is square.\n2. Remove any unnecessary columns (like the index column).\n3. Convert the DataFrame to a numpy array.\n4. Create the graph using NetworkX.\n\nHere is the complete code to achieve this:\n\n```python\nimport networkx as nx\nimport pandas as pd\n\n# Your DataFrame\ndata = {\n    'Unnamed: 0': ['Muklas', 'Amrozi', 'Imron', 'Samudra', 'Dulmatin', 'Idris', 'Mubarok', 'Azahari', 'Ghoni', 'Arnasan', 'Rauf', 'Octavia', 'Hidayat', 'Junaedi', 'Patek', 'Feri', 'Sarijo'],\n    'Muklas': [0, 2, 2, 1, 1, 5, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n    'Amrozi': [2, 0, 0, 2, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    'Imron': [2, 0, 0, 3, 5, 3, 0, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Samudra': [1, 2, 3, 0, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2],\n    'Dulmatin': [1, 0, 5, 2, 0, 2, 0, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Idris': [5, 4, 3, 5, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2],\n    'Mubarok': [0, 5, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    'Azahari': [1, 0, 5, 2, 5, 2, 0, 0, 5, 0, 0, 0, 0, 0, 2, 1, 2],\n    'Ghoni': [1, 0, 5, 2, 5, 2, 0, 5, 0, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Arnasan': [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0],\n    'Rauf': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0],\n    'Octavia': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0],\n    'Hidayat': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0],\n    'Junaedi': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],\n    'Patek': [1, 0, 5, 2, 5, 2, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 5],\n    'Feri': [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n    'Sarijo': [1, 0, 5, 2, 5, 2, 0, 2, 5, 0, 0, 0, 0, 0, 5, 1, 0]\n}\n\ndf = pd.DataFrame(data)\n\n# Set the index to the first column and drop the first column\ndf.set_index('Unnamed: 0', inplace=True)\n\n# Ensure the DataFrame is square\nif df.shape[0] != df.shape[1]:\n    raise ValueError(\"The adjacency matrix must be square.\")\n\n# Convert the DataFrame to a numpy array\nm = df.values\n\n# Create a graph from the adjacency matrix\nG = nx.from_numpy_array(m)\n\n# Map the node labels to the original names\nmapping = {i: name for i, name in enumerate(df.index)}\nG = nx.relabel_nodes(G, mapping)\n\n# Now you can work with the graph G\nprint(G.nodes())\nprint(G.edges())\n```\n\nThis code will create a graph `G` from your adjacency matrix data, with the nodes labeled according to the names in the original DataFrame. You can then use NetworkX functions to analyze and visualize the graph.\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[5], line 3\n      1 # %%\n      2 # Print the summary of the graph\n----> 3 print(nx.info(G))\n      5 # Plot the graph\n      6 pos = nx.kamada_kawai_layout(G)\nAttributeError: module 'networkx' has no attribute 'info'\nIt appears that the `info` function has been deprecated or removed in the version of NetworkX you are using. Instead, you can use other methods to get information about the graph. Here are some alternatives:\n\n1. **Basic Information**: You can manually print the number of nodes and edges.\n2. **Graph Summary**: You can create a custom summary function.\n\nHere is how you can do it:\n\n```python\nimport networkx as nx\nimport pandas as pd\n\n# Your DataFrame\ndata = {\n    'Unnamed: 0': ['Muklas', 'Amrozi', 'Imron', 'Samudra', 'Dulmatin', 'Idris', 'Mubarok', 'Azahari', 'Ghoni', 'Arnasan', 'Rauf', 'Octavia', 'Hidayat', 'Junaedi', 'Patek', 'Feri', 'Sarijo'],\n    'Muklas': [0, 2, 2, 1, 1, 5, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n    'Amrozi': [2, 0, 0, 2, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    'Imron': [2, 0, 0, 3, 5, 3, 0, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Samudra': [1, 2, 3, 0, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2],\n    'Dulmatin': [1, 0, 5, 2, 0, 2, 0, 5, 5, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Idris': [5, 4, 3, 5, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2],\n    'Mubarok': [0, 5, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    'Azahari': [1, 0, 5, 2, 5, 2, 0, 0, 5, 0, 0, 0, 0, 0, 2, 1, 2],\n    'Ghoni': [1, 0, 5, 2, 5, 2, 0, 5, 0, 0, 0, 0, 0, 0, 5, 1, 5],\n    'Arnasan': [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0],\n    'Rauf': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0],\n    'Octavia': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0],\n    'Hidayat': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0],\n    'Junaedi': [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0],\n    'Patek': [1, 0, 5, 2, 5, 2, 0, 2, 5, 0, 0, 0, 0, 0, 0, 1, 5],\n    'Feri': [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1],\n    'Sarijo': [1, 0, 5, 2, 5, 2, 0, 2, 5, 0, 0, 0, 0, 0, 5, 1, 0]\n}\n\ndf = pd.DataFrame(data)\n\n# Set the index to the first column and drop the first column\ndf.set_index('Unnamed: 0', inplace=True)\n\n# Ensure the DataFrame is square\nif df.shape[0] != df.shape[1]:\n    raise ValueError(\"The adjacency matrix must be square.\")\n\n# Convert the DataFrame to a numpy array\nm = df.values\n\n# Create a graph from the adjacency matrix\nG = nx.from_numpy_array(m)\n\n# Map the node labels to the original names\nmapping = {i: name for i, name in enumerate(df.index)}\nG = nx.relabel_nodes(G, mapping)\n\n# Print basic information about the graph\nprint(f\"Number of nodes: {G.number_of_nodes()}\")\nprint(f\"Number of edges: {G.number_of_edges()}\")\n\n# Print nodes and edges\nprint(\"Nodes:\", G.nodes())\nprint(\"Edges:\", G.edges())\n\n# Custom summary function\ndef graph_summary(graph):\n    summary = {\n        \"Number of nodes\": graph.number_of_nodes(),\n        \"Number of edges\": graph.number_of_edges(),\n        \"Nodes\": list(graph.nodes),\n        \"Edges\": list(graph.edges)\n    }\n    return summary\n\n# Print the summary of the graph\nsummary = graph_summary(G)\nfor key, value in summary.items():\n    print(f\"{key}: {value}\")\n\n# Plot the graph (optional)\nimport matplotlib.pyplot as plt\n\npos = nx.kamada_kawai_layout(G)\nnx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2000, edge_color='gray', font_size=10, font_weight='bold')\nplt.show()\n```\n\nThis code provides basic information about the graph, including the number of nodes and edges, and lists the nodes and edges. Additionally, it includes a custom summary function to print a more detailed summary of the graph. Finally, it includes optional code to plot the graph using Matplotlib.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":433}}},{"id":{"replica_id":0,"value":8},"start":355,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":434}}},{"id":{"replica_id":0,"value":9},"start":1165,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":435}}},{"id":{"replica_id":0,"value":46},"start":3004,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":436}}},{"id":{"replica_id":0,"value":47},"start":5011,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":437}}},{"id":{"replica_id":0,"value":89},"start":7978,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":438}}},{"id":{"replica_id":0,"value":90},"start":10611,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":439}}},{"id":{"replica_id":0,"value":232},"start":10985,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":440}}},{"id":{"replica_id":0,"value":233},"start":14438,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":441}}}],"summary":"NetworkX from_numpy_matrix AttributeError","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}